1.) what is AutoLayout ?

Auto Layout is a constraint-based layout system used in iOS to create responsive user interfaces. It automatically adjusts the size and position of views based on constraints, ensuring the UI looks good on different screen sizes and orientations. It helps maintain a consistent layout across all Apple devices.

2.) what is Optional ?

Optionals in Swift are used to represent a variable that can hold either a value or nil (no value). They help safely handle the absence of a value without crashing the app. You declare an optional by adding ? after the type, like String?.

optional are swift features were a variable can hold a value or it can be nil and Optionals can  be handled in multiple ways nil coalescing optional binding guard statement and force unwrap


3.) What is ARC (Automatic Reference Counting)?

var person1: Person? = Person(name: "John")
person1 = nil  // ARC deallocates the instance here

ARC (Automatic Reference Counting) is a memory management system in Swift that automatically keeps track of the number of references to class instances.
 When an instance is no longer needed, ARC automatically deallocates it to free up memory.

4.) What is a retain cycle? How do you prevent it?

A retain cycle happens when two or more objects hold strong references to each other, preventing ARC from deallocating them, which causes a memory leak.

To prevent it, use weak or unowned references for one of the objects, especially in closures or delegate patterns, so ARC can break the cycle and free memory.

var john: Person? = Person(name: "John")
var apt: Apartment? = Apartment(unit: "101")

john?.apartment = apt
apt?.tenant = john

john = nil
apt = nil  // ❌ Retain cycle — nothing gets deinitialized!  using   weak var tenant: Person?  // weak reference Now ARC can clean up properly.

One strong + one weak = safe
Two strong = memory leak
